/*
Copyright 2022 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package aws

// Generated by "go run codegen/main.go > endpoints_generated.go". DO NOT EDIT.

import(
	awsv2 "github.com/aws/aws-sdk-go-v2/aws"

	amplifyuibuilderv2 "github.com/aws/aws-sdk-go-v2/service/amplifyuibuilder"
	appconfigv2 "github.com/aws/aws-sdk-go-v2/service/appconfig"
	applicationcostprofilerv2 "github.com/aws/aws-sdk-go-v2/service/applicationcostprofiler"
	backupgatewayv2 "github.com/aws/aws-sdk-go-v2/service/backupgateway"
	codeguruprofilerv2 "github.com/aws/aws-sdk-go-v2/service/codeguruprofiler"
	codestarnotificationsv2 "github.com/aws/aws-sdk-go-v2/service/codestarnotifications"
	devopsguruv2 "github.com/aws/aws-sdk-go-v2/service/devopsguru"
	dlmv2 "github.com/aws/aws-sdk-go-v2/service/dlm"
	ec2instanceconnectv2 "github.com/aws/aws-sdk-go-v2/service/ec2instanceconnect"
	ecrpublicv2 "github.com/aws/aws-sdk-go-v2/service/ecrpublic"
	fisv2 "github.com/aws/aws-sdk-go-v2/service/fis"
	globalacceleratorv2 "github.com/aws/aws-sdk-go-v2/service/globalaccelerator"
	imagebuilderv2 "github.com/aws/aws-sdk-go-v2/service/imagebuilder"
	iotdataplanev2 "github.com/aws/aws-sdk-go-v2/service/iotdataplane"
	iotdeviceadvisorv2 "github.com/aws/aws-sdk-go-v2/service/iotdeviceadvisor"
	iottwinmakerv2 "github.com/aws/aws-sdk-go-v2/service/iottwinmaker"
	locationv2 "github.com/aws/aws-sdk-go-v2/service/location"
	memorydbv2 "github.com/aws/aws-sdk-go-v2/service/memorydb"
	migrationhubrefactorspacesv2 "github.com/aws/aws-sdk-go-v2/service/migrationhubrefactorspaces"
	migrationhubstrategyv2 "github.com/aws/aws-sdk-go-v2/service/migrationhubstrategy"
	mobilev2 "github.com/aws/aws-sdk-go-v2/service/mobile"
	panoramav2 "github.com/aws/aws-sdk-go-v2/service/panorama"
	pinpointsmsvoicev2 "github.com/aws/aws-sdk-go-v2/service/pinpointsmsvoice"
	protonv2 "github.com/aws/aws-sdk-go-v2/service/proton"
	rdsdatav2 "github.com/aws/aws-sdk-go-v2/service/rdsdata"
	redshiftdatav2 "github.com/aws/aws-sdk-go-v2/service/redshiftdata"
	resiliencehubv2 "github.com/aws/aws-sdk-go-v2/service/resiliencehub"
	route53recoveryclusterv2 "github.com/aws/aws-sdk-go-v2/service/route53recoverycluster"
	route53recoveryreadinessv2 "github.com/aws/aws-sdk-go-v2/service/route53recoveryreadiness"
	signerv2 "github.com/aws/aws-sdk-go-v2/service/signer"
	snowdevicemanagementv2 "github.com/aws/aws-sdk-go-v2/service/snowdevicemanagement"
	ssmcontactsv2 "github.com/aws/aws-sdk-go-v2/service/ssmcontacts"
	ssoadminv2 "github.com/aws/aws-sdk-go-v2/service/ssoadmin"
	timestreamqueryv2 "github.com/aws/aws-sdk-go-v2/service/timestreamquery"
	wafv2v2 "github.com/aws/aws-sdk-go-v2/service/wafv2"
	wellarchitectedv2 "github.com/aws/aws-sdk-go-v2/service/wellarchitected"
	worklinkv2 "github.com/aws/aws-sdk-go-v2/service/worklink"
	workmailmessageflowv2 "github.com/aws/aws-sdk-go-v2/service/workmailmessageflow"
)

// endpointsV2Resolvers is a map of endpoint resolvers by aws-sdk-go-v2 service
// libs.
var endpointsV2Resolvers = map[string]func(string) (awsv2.Endpoint, error){
	"amplifyuibuilder": func(region string) (awsv2.Endpoint, error) {
		return amplifyuibuilderv2.NewDefaultEndpointResolver().ResolveEndpoint(region, amplifyuibuilderv2.EndpointResolverOptions{})
	},
	"appconfig": func(region string) (awsv2.Endpoint, error) {
		return appconfigv2.NewDefaultEndpointResolver().ResolveEndpoint(region, appconfigv2.EndpointResolverOptions{})
	},
	"application-cost-profiler": func(region string) (awsv2.Endpoint, error) {
		return applicationcostprofilerv2.NewDefaultEndpointResolver().ResolveEndpoint(region, applicationcostprofilerv2.EndpointResolverOptions{})
	},
	"backup-gateway": func(region string) (awsv2.Endpoint, error) {
		return backupgatewayv2.NewDefaultEndpointResolver().ResolveEndpoint(region, backupgatewayv2.EndpointResolverOptions{})
	},
	"codeguru-profiler": func(region string) (awsv2.Endpoint, error) {
		return codeguruprofilerv2.NewDefaultEndpointResolver().ResolveEndpoint(region, codeguruprofilerv2.EndpointResolverOptions{})
	},
	"codestar-notifications": func(region string) (awsv2.Endpoint, error) {
		return codestarnotificationsv2.NewDefaultEndpointResolver().ResolveEndpoint(region, codestarnotificationsv2.EndpointResolverOptions{})
	},
	"devops-guru": func(region string) (awsv2.Endpoint, error) {
		return devopsguruv2.NewDefaultEndpointResolver().ResolveEndpoint(region, devopsguruv2.EndpointResolverOptions{})
	},
	"dlm": func(region string) (awsv2.Endpoint, error) {
		return dlmv2.NewDefaultEndpointResolver().ResolveEndpoint(region, dlmv2.EndpointResolverOptions{})
	},
	"ec2-instance-connect": func(region string) (awsv2.Endpoint, error) {
		return ec2instanceconnectv2.NewDefaultEndpointResolver().ResolveEndpoint(region, ec2instanceconnectv2.EndpointResolverOptions{})
	},
	"ecr-public": func(region string) (awsv2.Endpoint, error) {
		return ecrpublicv2.NewDefaultEndpointResolver().ResolveEndpoint(region, ecrpublicv2.EndpointResolverOptions{})
	},
	"fis": func(region string) (awsv2.Endpoint, error) {
		return fisv2.NewDefaultEndpointResolver().ResolveEndpoint(region, fisv2.EndpointResolverOptions{})
	},
	"globalaccelerator": func(region string) (awsv2.Endpoint, error) {
		return globalacceleratorv2.NewDefaultEndpointResolver().ResolveEndpoint(region, globalacceleratorv2.EndpointResolverOptions{})
	},
	"imagebuilder": func(region string) (awsv2.Endpoint, error) {
		return imagebuilderv2.NewDefaultEndpointResolver().ResolveEndpoint(region, imagebuilderv2.EndpointResolverOptions{})
	},
	"iotdata": func(region string) (awsv2.Endpoint, error) {
		return iotdataplanev2.NewDefaultEndpointResolver().ResolveEndpoint(region, iotdataplanev2.EndpointResolverOptions{})
	},
	"iotdeviceadvisor": func(region string) (awsv2.Endpoint, error) {
		return iotdeviceadvisorv2.NewDefaultEndpointResolver().ResolveEndpoint(region, iotdeviceadvisorv2.EndpointResolverOptions{})
	},
	"awsiottwinmaker": func(region string) (awsv2.Endpoint, error) {
		return iottwinmakerv2.NewDefaultEndpointResolver().ResolveEndpoint(region, iottwinmakerv2.EndpointResolverOptions{})
	},
	"geo": func(region string) (awsv2.Endpoint, error) {
		return locationv2.NewDefaultEndpointResolver().ResolveEndpoint(region, locationv2.EndpointResolverOptions{})
	},
	"memorydb": func(region string) (awsv2.Endpoint, error) {
		return memorydbv2.NewDefaultEndpointResolver().ResolveEndpoint(region, memorydbv2.EndpointResolverOptions{})
	},
	"refactor-spaces": func(region string) (awsv2.Endpoint, error) {
		return migrationhubrefactorspacesv2.NewDefaultEndpointResolver().ResolveEndpoint(region, migrationhubrefactorspacesv2.EndpointResolverOptions{})
	},
	"awsmigrationhubstrategyrecommendation": func(region string) (awsv2.Endpoint, error) {
		return migrationhubstrategyv2.NewDefaultEndpointResolver().ResolveEndpoint(region, migrationhubstrategyv2.EndpointResolverOptions{})
	},
	"awsmobilehubservice": func(region string) (awsv2.Endpoint, error) {
		return mobilev2.NewDefaultEndpointResolver().ResolveEndpoint(region, mobilev2.EndpointResolverOptions{})
	},
	"panorama": func(region string) (awsv2.Endpoint, error) {
		return panoramav2.NewDefaultEndpointResolver().ResolveEndpoint(region, panoramav2.EndpointResolverOptions{})
	},
	"sms-voice": func(region string) (awsv2.Endpoint, error) {
		return pinpointsmsvoicev2.NewDefaultEndpointResolver().ResolveEndpoint(region, pinpointsmsvoicev2.EndpointResolverOptions{})
	},
	"awsproton20200720": func(region string) (awsv2.Endpoint, error) {
		return protonv2.NewDefaultEndpointResolver().ResolveEndpoint(region, protonv2.EndpointResolverOptions{})
	},
	"rds-data": func(region string) (awsv2.Endpoint, error) {
		return rdsdatav2.NewDefaultEndpointResolver().ResolveEndpoint(region, rdsdatav2.EndpointResolverOptions{})
	},
	"redshift-data": func(region string) (awsv2.Endpoint, error) {
		return redshiftdatav2.NewDefaultEndpointResolver().ResolveEndpoint(region, redshiftdatav2.EndpointResolverOptions{})
	},
	"resiliencehub": func(region string) (awsv2.Endpoint, error) {
		return resiliencehubv2.NewDefaultEndpointResolver().ResolveEndpoint(region, resiliencehubv2.EndpointResolverOptions{})
	},
	"route53-recovery-cluster": func(region string) (awsv2.Endpoint, error) {
		return route53recoveryclusterv2.NewDefaultEndpointResolver().ResolveEndpoint(region, route53recoveryclusterv2.EndpointResolverOptions{})
	},
	"route53-recovery-readiness": func(region string) (awsv2.Endpoint, error) {
		return route53recoveryreadinessv2.NewDefaultEndpointResolver().ResolveEndpoint(region, route53recoveryreadinessv2.EndpointResolverOptions{})
	},
	"signer": func(region string) (awsv2.Endpoint, error) {
		return signerv2.NewDefaultEndpointResolver().ResolveEndpoint(region, signerv2.EndpointResolverOptions{})
	},
	"snow-device-management": func(region string) (awsv2.Endpoint, error) {
		return snowdevicemanagementv2.NewDefaultEndpointResolver().ResolveEndpoint(region, snowdevicemanagementv2.EndpointResolverOptions{})
	},
	"ssm-contacts": func(region string) (awsv2.Endpoint, error) {
		return ssmcontactsv2.NewDefaultEndpointResolver().ResolveEndpoint(region, ssmcontactsv2.EndpointResolverOptions{})
	},
	"sso": func(region string) (awsv2.Endpoint, error) {
		return ssoadminv2.NewDefaultEndpointResolver().ResolveEndpoint(region, ssoadminv2.EndpointResolverOptions{})
	},
	"timestream": func(region string) (awsv2.Endpoint, error) {
		return timestreamqueryv2.NewDefaultEndpointResolver().ResolveEndpoint(region, timestreamqueryv2.EndpointResolverOptions{})
	},
	"wafv2": func(region string) (awsv2.Endpoint, error) {
		return wafv2v2.NewDefaultEndpointResolver().ResolveEndpoint(region, wafv2v2.EndpointResolverOptions{})
	},
	"wellarchitected": func(region string) (awsv2.Endpoint, error) {
		return wellarchitectedv2.NewDefaultEndpointResolver().ResolveEndpoint(region, wellarchitectedv2.EndpointResolverOptions{})
	},
	"worklink": func(region string) (awsv2.Endpoint, error) {
		return worklinkv2.NewDefaultEndpointResolver().ResolveEndpoint(region, worklinkv2.EndpointResolverOptions{})
	},
	"workmailmessageflow": func(region string) (awsv2.Endpoint, error) {
		return workmailmessageflowv2.NewDefaultEndpointResolver().ResolveEndpoint(region, workmailmessageflowv2.EndpointResolverOptions{})
	},
}
